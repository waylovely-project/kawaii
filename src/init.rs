use dialoguer::MultiSelect;

pub fn cmd_init() {
    let sdk_root = std::env::var("ANDROID_SDK_ROOT").ok();

    if sdk_root.is_some() {
  
        let input: String = Input::new()
            .with_prompt("Where is your Android SDK located?")
            .with_initial_text("Somewhere...")
            .interact_text()?;

        let path PathBuf::from(input);
        

    } 
    click.echo(f"The SDK path will be set to: {sdk_root}")
    if not os.environ.get("ANDROID_PLATFORM"):
        sdk_version = inquirer.shortcuts.text(
            "What version of the Android SDK would you like to use?"
        )
    else:
        sdk_version = os.environ["ANDROID_PLATFORM"][8:]

    if not os.environ.get("ANDROID_NDK_ROOT"):
        ndk_folder = os.path.join(sdk_root, "ndk")
        ndk_version = inquirer.shortcuts.list_input(
            "Which NDK version do you want to use?",
            choices=os.listdir(ndk_folder),
        )
    else:
        ndk_version = path.basename(os.environ["ANDROID_NDK_ROOT"])

    click.echo(f"The NDK version will be set to: {ndk_version}")

    if not os.environ.get("ANDROID_ABI"):
        abi = inquirer.shortcuts.list_input(
            "What ABI are you building for?",
            choices=["arm64-v8a", "armv7a-eabi", "x86_64", "x86"],
        )

    click.echo(f"The ABI will be set to: {abi}")

    if not path.exists(cache_path):
        os.mkdir(cache_path)
        disclaimer = """# This is autogenerated by Simple and Kawaii. It won't come back if you delete it. <3 
                        # Unless you remade it yourself?"""
        gitignore = open(path.join(cache_path), ".gitignore")
        gitignore.writelines(disclaimer + "\n*")
        hgignore = open(path.join(cache_path), ".hgignore")
        hgignore.write(disclaimer + "\n**/*")

    config = open(path.join(cache_path, "config.json"), mode="w")

    config.write(
        json.dumps(
            {
                "android-abi": abi,
                "android-sdk-root": sdk_root,
                "android-ndk-version": ndk_version,
                "android-platform": sdk_version,
            },
            sort_keys=True,
            indent=4,
        )
    )

    crossfile_file = open(path.join(cache_path, f"meson-{abi}.ini"), mode="w")
    env = Environment(
        loader=PackageLoader("simple_and_kawaii"),
        autoescape=select_autoescape(),
    )
    crossfile = env.get_template("crossfile.ini")

        
    crossfile_file.write(
        crossfile.render(
            ndk_version=ndk_version,
            cpu_info=get_cpu_info(abi),
            abi=abi,
            sdk_version=sdk_version,
            host_arch=get_host_arch(),
            host_os=get_host_os(),
        )
    )
}